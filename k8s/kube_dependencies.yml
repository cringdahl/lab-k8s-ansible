- name: Kubernetes Dependencies
  hosts: all
  vars_files:
    - vars.yml
  vars:
    k8s_nodes_sysctls:
      - { name: net.bridge.bridge-nf-call-iptables, value: 1 }
      - { name: net.bridge.bridge-nf-call-ip6tables, value: 1 }
      - { name: net.ipv4.ip_forward, value: 1 }
      - { name: vm.swappiness, value: 0 }
    modprobe_containerd:
      - overlay
      - br_netfilter
  become: true
  tasks:
    - name: Disable SWAP on raspberry pi
      ansible.builtin.command: |
        dphys-swapfile uninstall
      register: swapoff
      changed_when: swapoff.rc == 0

    - name: Configure modules for containerd
      community.general.modprobe:
        name: "{{ item }}"
        persistent: present
      loop: "{{ modprobe_containerd }}"
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    - name: Set k8s sysctl params
      ansible.posix.sysctl:
        sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      loop: "{{ k8s_nodes_sysctls }}"
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    - name: Install APT Transport HTTPS
      ansible.builtin.apt:
        name: apt-transport-https
        state: present

    - name: Add Docker apt-key
      ansible.builtin.get_url:
        url: "https://download.docker.com/linux/debian/gpg"
        dest: /etc/apt/keyrings/docker.asc
        mode: "0644"
        force: true

    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian {{ ansible_facts['distribution_release'] }} stable"
        state: present
        update_cache: true

    - name: Add Kubernetes apt-key
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_ver }}/deb/Release.key"
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: "0644"
        force: true

    - name: Add Kubernetes APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v{{ k8s_ver }}/deb/ /"
        state: present
        update_cache: true

    - name: Install Docker & containerd
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        install_recommends: false
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    - name: Create containerd directory
      ansible.builtin.file:
        path: /etc/containerd
        mode: "0755"
        state: directory

    - name: Check containerd config.toml head
      ansible.builtin.command: head -1 /etc/containerd/config.toml
      register: containerd_config
      changed_when: containerd_config.rc == 0

    - name: Add containerd configuration
      ansible.builtin.shell: /usr/bin/containerd config default > /etc/containerd/config.toml
      register: containerd_config_updated
      when: containerd_config.stdout == "#   Copyright 2018-2022 Docker Inc."
      changed_when: containerd_config_updated.changed == true

    - name: Configuring Systemd cgroup driver for containerd
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: "            SystemdCgroup = false"
        line: "            SystemdCgroup = true"

    # - name: Ensuring cri module in containerd # need to do better regexp job :/
    #   lineinfile:
    #       path: /etc/containerd/config.toml
    #       regexp: "disabled_plugins"
    #       line: "#disabled_plugins"
    #   ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    - name: Enable the containerd service and start service
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: true
        daemon-reload: true

    - name: Install Kubelet
      ansible.builtin.apt:
        name: "kubelet={{ k8s_ver }}.*"
        state: present
        update_cache: true
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    - name: Install Kubeadm
      ansible.builtin.apt:
        name: "kubeadm={{ k8s_ver }}.*"
        state: present
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    - name: Hold Kubeadm
      ansible.builtin.dpkg_selections:
        name: kubeadm
        selection: hold
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    - name: Hold Kubelet
      ansible.builtin.dpkg_selections:
        name: kubelet
        selection: hold
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    ## this should go in an upgrade module
    # - name: Unhold kubeadm
    #   ansible.builtin.dpkg_selections:
    #     name: kubeadm
    #     selection: install

    ## this should go in an upgrade module
    # - name: Unhold Kubelet
    #   ansible.builtin.dpkg_selections:
    #     name: kubelet
    #     selection: install

    - name: Enable the Kubelet service
      ansible.builtin.service:
        name: kubelet
        enabled: true
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    - name: Load br_netfilter kernel module
      community.general.modprobe:
        name: br_netfilter
        state: present

    # - name: Reboot
    #   reboot:

- name: Control Plane Dependencies
  hosts: control
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Add Helm apt-key
      ansible.builtin.get_url:
        url: https://baltocdn.com/helm/signing.asc
        dest: /etc/apt/keyrings/helm.asc
        mode: "0644"
        force: true

    - name: Add Helm's APT repo
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/helm.asc] https://baltocdn.com/helm/stable/debian/ all main"
        state: present
        update_cache: true

    - name: Install Helm
      ansible.builtin.apt:
        name: helm
        state: present
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    - name: Install Kubectl
      ansible.builtin.apt:
        name: "kubectl={{ k8s_ver }}.*"
        state: present
        force: true
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.

    - name: Hold Kubectl
      ansible.builtin.dpkg_selections:
        name: kubectl
        selection: hold
      ignore_errors: "{{ ansible_check_mode }}" # <- Ignores errors in check mode.
